apiVersion: template.openshift.io/v1
kind: Template
parameters:
  - name: NAME
    description: Product name
    value: nr-quickstart-typescript
  - name: COMPONENT
    description: Component name
    value: database
  - name: BACKUP_COMPONENT
    description: Name of the backup component
    value: database-backup
  - name: ZONE
    description: Deployment zone, e.g. pr-### or prod
    required: true
  - name: IMAGE_TAG
    description: Image tag to use
    value: latest
  - name: PVC_MOUNT_PATH
    description: Where to mount the PVC, subpath (e.g. data/)
    value: /var/lib/postgresql
  - name: DB_PVC_SIZE
    description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Database Volume Capacity
    required: true
    value: 1Gi
  - name: REGISTRY
    description: Container registry to import from (internal is image-registry.openshift-image-registry.svc:5000)
    value: ghcr.io
  - name: PROMOTE
    description: Image (namespace/name:tag) to promote/import
    value: openshift/postgresql:12
  - name: DATABASE_PORT
    description: The configured port for the database service
    value: "5432"
  - name: DATABASE_USER_KEY_NAME
    description:
      The database user key name stored in database deployment resources specified
      by DATABASE_SECRET_NAME.
    value: database-user
  - name: DATABASE_PASSWORD_KEY_NAME
    description:
      The database password key name stored in database deployment resources
      specified by DATABASE_SECRET_NAME.
    value: database-password
  - name: BACKUP_STRATEGY
    description: The strategy to use for backups; for example daily, or rolling.
    required: false
    value: rolling
  - name: BACKUP_DIR
    description: The name of the root backup directory
    required: false
    value: /backups/
  - name: NUM_BACKUPS
    description: The number of backup files to be retained.  Used for the `daily` backup strategy.  Ignored when using the `rolling` backup strategy.
    required: false
    value: "5"
  - name: DAILY_BACKUPS
    description: The number of daily backup files to be retained.  Used for the `rolling` backup strategy.
    required: false
    value: "7"
  - name: WEEKLY_BACKUPS
    description: The number of weekly backup files to be retained.  Used for the `rolling` backup strategy.
    required: false
    value: "4"
  - name: MONTHLY_BACKUPS
    displayName: Number of Monthly Backups to Retain
    description: The number of monthly backup files to be retained.  Used for the `rolling` backup strategy.
    required: false
    value: "1"
  - name: JOB_SERVICE_ACCOUNT
    description: Name of the Service Account To Exeucte the Job As.
    value: default
    required: false
  - name: SUCCESS_JOBS_HISTORY_LIMIT
    description: The number of successful jobs that will be retained
    value: "5"
    required: false
  - name: FAILED_JOBS_HISTORY_LIMIT
    description: The number of failed jobs that will be retained
    value: "2"
    required: false
  - name: JOB_BACKOFF_LIMIT
    description: The number of attempts to try for a successful job outcome
    value: "0"
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    name: PVC_SIZE
    value: 1Gi
  - name: CRON_MINUTES
    description: Random number, 0-60, for scheduling cronjobs
    from: "[0-5]{1}[0-9]{1}"
    generate: expression
objects:
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${DB_PVC_SIZE}
      storageClassName: netapp-file-standard
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      lookupPolicy:
        local: false
      tags:
        - name: ${IMAGE_TAG}
          from:
            kind: DockerImage
            name: ${REGISTRY}/${PROMOTE}
          referencePolicy:
            type: Local
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      replicas: 1
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${NAME}
            from:
              kind: ImageStreamTag
              name: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      strategy:
        type: Recreate
        recreateParams:
          timeoutSeconds: 600
        activeDeadlineSeconds: 21600
      template:
        metadata:
          name: ${NAME}-${ZONE}-${COMPONENT}
          labels:
            app: ${NAME}-${ZONE}
            deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
        spec:
          volumes:
            - name: ${NAME}-${ZONE}-${COMPONENT}
              persistentVolumeClaim:
                claimName: ${NAME}-${ZONE}-${COMPONENT}
          containers:
            - name: ${NAME}
              image: ${NAME}-${ZONE}-${COMPONENT}:${IMAGE_TAG}
              ports:
                - containerPort: ${DEFAULT_DATABASE_PORT}
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'

                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              livenessProbe:
                exec:
                  command:
                    - /usr/bin/env
                    - bash
                    - -c
                    - psql -q -U $POSTGRES_USER -d $POSTGRES_DB -c 'SELECT 1'
                failureThreshold: 5
                initialDelaySeconds: 30
                periodSeconds: 15
                timeoutSeconds: 1
              env:
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-name
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-password
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${NAME}-${ZONE}-${COMPONENT}
                      key: database-user
              volumeMounts:
                - name: ${NAME}-${ZONE}-${COMPONENT}
                  mountPath: ${PVC_MOUNT_PATH}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              imagePullPolicy: Always
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          schedulerName: default-scheduler
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: ${NAME}-${ZONE}
      name: ${NAME}-${ZONE}-${COMPONENT}
    spec:
      ports:
        - name: postgresql
          nodePort: 0
          port: ${DEFAULT_DATABASE_PORT}
          protocol: TCP
          targetPort: ${DEFAULT_DATABASE_PORT}
      selector:
        deploymentconfig: ${NAME}-${ZONE}-${COMPONENT}
      sessionAffinity: None
      type: ClusterIP
  ### Backup container starts here
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      metadata:
        labels:
          app: ${NAME}-${ZONE}
      triggers:
        - type: ImageChange
        - type: ConfigChange
      runPolicy: Serial
      source:
        type: Git
        git:
          uri: https://github.com/BCDevOps/backup-container.git
          ref: master
        contextDir: /docker
      strategy:
        type: Docker
        dockerStrategy:
          from:
            kind: DockerImage
            name: docker.io/centos/postgresql-13-centos7:20210722-70dc4d3
          dockerfilePath: Dockerfile
      output:
        to:
          kind: ImageStreamTag
          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}:${ZONE}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${PVC_SIZE}
      storageClassName: netapp-file-standard
  - kind: ConfigMap
    apiVersion: v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    data:
      DATABASE_SERVICE_NAME: ${NAME}-${ZONE}-db
      DEFAULT_PORT: ${DATABASE_PORT}
      POSTGRESQL_DATABASE: ${COMPONENT}
      BACKUP_STRATEGY: ${BACKUP_STRATEGY}
      RETENTION.NUM_BACKUPS: ${NUM_BACKUPS}
      RETENTION.DAILY_BACKUPS: ${DAILY_BACKUPS}
      RETENTION.WEEKLY_BACKUPS: ${WEEKLY_BACKUPS}
      RETENTION.MONTHLY_BACKUPS: ${MONTHLY_BACKUPS}
  - kind: CronJob
    apiVersion: batch/v1
    metadata:
      name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
      labels:
        app: ${NAME}-${ZONE}
        cronjob: ${NAME}-${ZONE}
    spec:
      schedule: "${CRON_MINUTES} 8 * * *" # Run daily at 8:xx AM UTC
      concurrencyPolicy: Replace
      successfulJobsHistoryLimit: ${{SUCCESS_JOBS_HISTORY_LIMIT}}
      failedJobsHistoryLimit: ${{FAILED_JOBS_HISTORY_LIMIT}}
      jobTemplate:
        metadata:
          labels:
            app: ${NAME}-${ZONE}
            cronjob: ${NAME}-${ZONE}
        spec:
          backoffLimit: ${{JOB_BACKOFF_LIMIT}}
          template:
            metadata:
              labels:
                app: ${NAME}-${ZONE}
                cronjob: ${NAME}-${ZONE}
            spec:
              containers:
                - name: ${NAME}-${ZONE}
                  image: ${NAME}-${ZONE}-${BACKUP_COMPONENT}:${ZONE}
                  command:
                    - /bin/bash
                    - -c
                    - /backup.sh -1
                  volumeMounts:
                    - mountPath: ${BACKUP_DIR}
                      name: backup
                  env:
                    - name: BACKUP_DIR
                      value: ${BACKUP_DIR}
                    - name: BACKUP_STRATEGY
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: BACKUP_STRATEGY
                    - name: NUM_BACKUPS
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: RETENTION.NUM_BACKUPS
                          optional: true
                    - name: DAILY_BACKUPS
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: RETENTION.DAILY_BACKUPS
                          optional: true
                    - name: WEEKLY_BACKUPS
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: RETENTION.WEEKLY_BACKUPS
                          optional: true
                    - name: MONTHLY_BACKUPS
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: RETENTION.MONTHLY_BACKUPS
                          optional: true
                    - name: DATABASE_SERVICE_NAME
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: DATABASE_SERVICE_NAME
                    - name: DEFAULT_PORT
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: DEFAULT_PORT
                          optional: true
                    - name: POSTGRESQL_DATABASE
                      valueFrom:
                        configMapKeyRef:
                          name: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
                          key: POSTGRESQL_DATABASE
                    - name: DATABASE_USER
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-db
                          key: ${DATABASE_USER_KEY_NAME}
                    - name: DATABASE_PASSWORD
                      valueFrom:
                        secretKeyRef:
                          name: ${NAME}-${ZONE}-db
                          key: ${DATABASE_PASSWORD_KEY_NAME}
              volumes:
                - name: backup
                  persistentVolumeClaim:
                    claimName: ${NAME}-${ZONE}-${BACKUP_COMPONENT}
              restartPolicy: Never
              terminationGracePeriodSeconds: 30
              activeDeadlineSeconds: 1600
              dnsPolicy: ClusterFirst
              serviceAccountName: ${JOB_SERVICE_ACCOUNT}
              serviceAccount: ${JOB_SERVICE_ACCOUNT}
